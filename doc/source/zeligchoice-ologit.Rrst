.. _zcologit:

zeligchoice-ologit
~~~~~~

Ordinal Logistic Regression for Ordered Categorical Dependent Variables

Use the ordinal logit regression model if your dependent variable is
ordered and categorical, either in the form of integer values or
character strings.

Syntax
+++++

With reference classes:

.. {r, eval = FALSE}
z5 <- zologit$new()
z5$zelig(as.factor(Y) ~ X1 + X2, data = mydata)
z5$setx()
z5$sim()
.. ..

With the Zelig 4 compatibility wrappers:

.. {r, eval = FALSE}
z.out <- zelig(as.factor(Y) ~ X1 + X23, 
               model = "ologit", data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out, x1 = NULL)
.. ..


If Y takes discrete integer values, the as.factor() command will order
automatically order the values. If Y takes on values composed of
character strings, such as “strongly agree”, “agree”, and “disagree”,
as.factor() will order the values in the order in which they appear in
Y. You will need to replace your dependent variable with a factored
variable prior to estimating the model through zelig(). See Section
[factors] for more information on creating ordered factors and Example
[ord.fact] below.

Example
+++++

.. {r, eval = TRUE, echo = FALSE}	
suppressWarnings(suppressMessages(library(Zelig)))	
suppressWarnings(suppressMessages(library(ZeligChoice)))
set.seed(1234)
.. ..

Creating An Ordered Dependent Variable
!!!!!

Load the sample data:

.. {r, eval = TRUE}
data(sanction)
.. ..

Create an ordered dependent variable:

.. {r, eval = TRUE}
sanction$ncost <- factor(sanction$ncost, ordered = TRUE,
                         levels = c("net gain", "little effect", "modest loss", "major loss"))
.. ..

Estimate the model:

.. {r, eval = FALSE}
z.out <- zelig(ncost ~ mil + coop, model = "ologit",
               data = sanction)
.. ..

Set the explanatory variables to their observed values:

.. {r, eval = TRUE}
x.out <- setx(z.out, fn = NULL)
.. ..

Simulate fitted values given x.out and view the results:

.. {r, eval = TRUE}
s.out <- sim(z.out, x = x.out)
.. ..

.. {r, eval = TRUE}
summary(s.out)
.. ..

First Differences
!!!!!

Using the sample data ``sanction``, estimate the empirical model and returning the coefficients:

.. {r, eval = TRUE}
z.out <- zelig(as.factor(cost) ~ mil + coop, model = "ologit",
               data = sanction)
.. ..

.. {r, eval = TRUE}
summary(z.out)
.. ..

Set the explanatory variables to their means, with mil set to 0 (no
military action in addition to sanctions) in the baseline case and set
to 1 (military action in addition to sanctions) in the alternative case:

.. {r, eval = TRUE}
x.low <- setx(z.out, mil = 0)
x.high <- setx(z.out, mil = 1)
.. ..

Generate simulated fitted values and first differences, and view the results:

.. {r, eval = TRUE}
s.out <- sim(z.out, x = x.low, x1 = x.high)
summary(s.out)
.. ..

Model
+++++

Let :math:`Y_i` be the ordered categorical dependent variable for
observation :math:`i` that takes one of the integer values from
:math:`1` to :math:`J` where :math:`J` is the total number of
categories.

-  The *stochastic component* begins with an unobserved continuous
   variable, :math:`Y^*_i`, which follows the standard logistic
   distribution with a parameter :math:`\mu_i`,

   .. math:: Y_i^* \; \sim \; \textrm{Logit}(y_i^* \mid \mu_i),

   to which we add an observation mechanism

   .. math::

      Y_i \; = \; j \quad {\rm if} \quad \tau_{j-1} \le Y_i^* \le \tau_j
          \quad {\rm for} \quad j=1,\dots,J.

   where :math:`\tau_l` (for :math:`l=0,\dots,J`) are the threshold
   parameters with :math:`\tau_l < \tau_m` for all :math:`l<m` and
   :math:`\tau_0=-\infty` and :math:`\tau_J=\infty`.

-  The *systematic component* has the following form, given the
   parameters :math:`\tau_j` and :math:`\beta`, and the explanatory
   variables :math:`x_i`:

   .. math::

      \Pr(Y \le j) \; = \; \Pr(Y^* \le \tau_j) \; = \frac{\exp(\tau_j -
            x_i \beta)}{1+\exp(\tau_j -x_i \beta)},

   which implies:

   .. math::

      \pi_{j}  \; = \; \frac{\exp(\tau_j - x_i \beta)}{1 + \exp(\tau_j -
            x_i \beta)} - \frac{\exp(\tau_{j-1} - x_i \beta)}{1 +
            \exp(\tau_{j-1} - x_i \beta)}.

Quantities of Interest
+++++

-  The expected values (qi$ev) for the ordinal logit model are
   simulations of the predicted probabilities for each category:

   .. math::

      E(Y = j) \; = \; \pi_{j} \; = \; \frac{\exp(\tau_j - x_i \beta)}
      {1 + \exp(\tau_j - x_i \beta)} - \frac{\exp(\tau_{j-1} - x_i \beta)}{1 +
       \exp(\tau_{j-1} - x_i \beta)},

   given a draw of :math:`\beta` from its sampling distribution.

-  The predicted value (qi$pr) is drawn from the logit distribution
   described by :math:`\mu_i`, and observed as one of :math:`J` discrete
   outcomes.

-  The difference in each of the predicted probabilities (qi$fd) is
   given by

   .. math::

      \Pr(Y=j \mid x_1) \;-\; \Pr(Y=j \mid x) \quad {\rm for} \quad
          j=1,\dots,J.

-  In conditional prediction models, the average expected treatment
   effect (att.ev) for the treatment group is

   .. math::

      \frac{1}{n_j}\sum_{i:t_i=1}^{n_j} \left\{ Y_i(t_i=1) -
            E[Y_i(t_i=0)] \right\},

   where :math:`t_{i}` is a binary explanatory variable defining the
   treatment (:math:`t_{i}=1`) and control (:math:`t_{i}=0`) groups, and
   :math:`n_j` is the number of treated observations in category
   :math:`j`.

-  In conditional prediction models, the average predicted treatment
   effect (att.pr) for the treatment group is

   .. math::

      \frac{1}{n_j}\sum_{i:t_i=1}^{n_j} \left\{ Y_i(t_i=1) -
            \widehat{Y_i(t_i=0)} \right\},

   where :math:`t_{i}` is a binary explanatory variable defining the
   treatment (:math:`t_{i}=1`) and control (:math:`t_{i}=0`) groups, and
   :math:`n_j` is the number of treated observations in category
   :math:`j`.

Output Values
+++++

The output of each Zelig command contains useful information which you
may view. For example, if you run
``z.out <- zelig(y ~ x, model = ologit, data)``, then you may examine
the available information in ``z.out`` by using ``names(z.out)``, see
the coefficients by using z.out$coefficients, and a default summary of
information through ``summary(z.out)``. Other elements available through
the $ operator are listed below.

-  From the zelig() output object z.out, you may extract:

   -  coefficients: parameter estimates for the explanatory variables.

   -  zeta: a vector containing the estimated class boundaries
      :math:`\tau_j`.

   -  deviance: the residual deviance.

   -  fitted.values: the :math:`n \times J` matrix of in-sample fitted
      values.

   -  df.residual: the residual degrees of freedom.

   -  edf: the effective degrees of freedom.

   -  Hessian: the Hessian matrix.

   -  zelig.data: the input data frame if save.data = TRUE.

-  From summary(z.out), you may extract:

   -  coefficients: the parameter estimates with their associated
      standard errors, and :math:`t`-statistics.


See also
+++++

The ordinal logit model is part of the MASS package by William N.
Venable and Brian D. Ripley. Advanced users may wish to refer to
``help(polr)``.
