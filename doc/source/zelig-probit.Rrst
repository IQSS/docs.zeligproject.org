.. _zprobit:

zelig-probit
~~~~~~

Probit Regression for Dichotomous Dependent Variables

Use probit regression to model binary dependent variables specified as a
function of a set of explanatory variables.

Syntax
+++++

With reference classes:

.. {r, eval = FALSE}
z5 <- zprobit$new()
z5$zelig(Y ~ X1 + X ~ X, weights = w, data = mydata)
z5$setx()
z5$sim()
.. ..

With the Zelig 4 compatibility wrappers:

.. {r, eval = FALSE}
z.out <- zelig(Y ~ X1 + X2, model = "probit", weights = w, data = mydata)
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out, x1 = NULL)
.. ..

Example
+++++

.. {r, eval = TRUE, echo = FALSE}
rm(list=ls(pattern="\\.out"))	
suppressWarnings(suppressMessages(library(Zelig)))
set.seed(1234)
.. .. 

Attach the sample turnout dataset:

.. {r, eval = TRUE}
data(turnout)
.. ..

Estimate parameter values for the probit regression:

.. {r, eval = TRUE}
z.out <- zelig(vote ~ race + educate, model = "probit", data = turnout)
.. ..

.. {r, eval = TRUE}
summary(z.out)
.. ..

Set values for the explanatory variables to their default values.

.. {r, eval = TRUE}
x.out <- setx(z.out)
.. ..

Simulate quantities of interest from the posterior distribution.

.. {r, eval = TRUE}
s.out <- sim(z.out, x = x.out)
.. ..

.. {r, eval = FALSE}
summary(s.out)
.. ..

.. {r Zelig-probit, dev=c("png", "pdf"), eval = TRUE, fig.cap = "Graphs of Quantities of Interest for Zelig-probit"}
plot(s.out)
.. ..


Model
+++++

Let :math:`Y_i` be the observed binary dependent variable for
observation :math:`i` which takes the value of either 0 or 1.

-  The *stochastic component* is given by

   .. math:: Y_i \; \sim \; \textrm{Bernoulli}(\pi_i),

   where :math:`\pi_i=\Pr(Y_i=1)`.

-  The *systematic component* is

   .. math:: \pi_i \; = \; \Phi (x_i \beta)

   where :math:`\Phi(\mu)` is the cumulative distribution function of
   the Normal distribution with mean 0 and unit variance.

Quantities of Interest
+++++

-  The expected value (qi$ev) is a simulation of predicted probability
   of success

   .. math::

      E(Y) = \pi_i = \Phi(x_i
        \beta),

   given a draw of :math:`\beta` from its sampling distribution.

-  The predicted value (qi$pr) is a draw from a Bernoulli distribution
   with mean :math:`\pi_i`.

-  The first difference (qi$fd) in expected values is defined as

   .. math:: \textrm{FD} = \Pr(Y = 1 \mid x_1) - \Pr(Y = 1 \mid x).

-  The risk ratio (qi$rr) is defined as

   .. math:: \textrm{RR} = \Pr(Y = 1 \mid x_1) / \Pr(Y = 1 \mid x).

-  In conditional prediction models, the average expected treatment
   effect (att.ev) for the treatment group is

   .. math::

      \frac{1}{\sum_{i=1}^n t_i}\sum_{i:t_i=1}^n \left\{ Y_i(t_i=1) -
            E[Y_i(t_i=0)] \right\},

   where :math:`t_i` is a binary explanatory variable defining the
   treatment (:math:`t_i=1`) and control (:math:`t_i=0`) groups.
   Variation in the simulations are due to uncertainty in simulating
   :math:`E[Y_i(t_i=0)]`, the counterfactual expected value of
   :math:`Y_i` for observations in the treatment group, under the
   assumption that everything stays the same except that the treatment
   indicator is switched to :math:`t_i=0`.

-  In conditional prediction models, the average predicted treatment
   effect (att.pr) for the treatment group is

   .. math::

      \frac{1}{\sum_{i=1}^n t_i}\sum_{i:t_i=1}^n \left\{ Y_i(t_i=1) -
            \widehat{Y_i(t_i=0)} \right\},

   where :math:`t_i` is a binary explanatory variable defining the
   treatment (:math:`t_i=1`) and control (:math:`t_i=0`) groups.
   Variation in the simulations are due to uncertainty in simulating
   :math:`\widehat{Y_i(t_i=0)}`, the counterfactual predicted value of
   :math:`Y_i` for observations in the treatment group, under the
   assumption that everything stays the same except that the treatment
   indicator is switched to :math:`t_i=0`.

Output Values
+++++


The Zelig object stores fields containing everything needed to
rerun the Zelig output, and all the results and simulations as they are generated.
In addition to the summary commands demonstrated above, some simply utility 
functions (known as *getters*) provide easy access to the raw fields most
commonly of use for further investigation.

In the example above ``z.out$getcoef()`` returns the estimated coefficients, ``z.out$getvcov()`` returns the estimated covariance matrix, and ``z.out$getpredict()`` provides predicted values for all observations in the dataset from the analysis.


See also
+++++

The probit model is part of the stats package by the R Core Team. Advanced users may
wish to refer to ``help(glm)`` and ``help(family)``.

.. {r, eval = TRUE, echo=FALSE, results = "asis"} 
z5 <- zprobit$new()
z5$references()
.. ..
