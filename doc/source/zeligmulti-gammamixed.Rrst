.. _zmultigammamixed:

.. warning:: ``ZeligMultilevel`` is currently under development.  We
	     are working on the model vignettes of the package.

zeligmulti-gammamixed
~~~~~~

gamma.mixed: Mixed effects gamma regression

Use generalized multi-level linear regression if you have covariates
that are grouped according to one or more classification factors. Gamma
regression models a continuous, positive dependent variable.

While generally called multi-level models in the social sciences, this
class of models is often referred to as mixed-effects models in the
statistics literature and as hierarchical models in a Bayesian setting.
This general class of models consists of linear models that are
expressed as a function of both *fixed effects*, parameters
corresponding to an entire population or certain repeatable levels of
experimental factors, and *random effects*, parameters corresponding to
individual experimental units drawn at random from a population.

Syntax
+++++

.. {r, eval = FALSE}
z5 <- zgammamixed$new()
z5$zelig(formula= y ~ x1 + x2 + (z1 + z2 | g), weights = w, data = mydata)
z5$setx()
z5$sim()
.. ..

With the Zelig 4 compatibility wrappers:

.. {r, eval = FALSE}
z.out <- zelig(formula= y ~ x1 + x2 + (z1 + z2 | g),
               data = mydata, weights = w, model = "gamma.mixed")
x.out <- setx(z.out)
s.out <- sim(z.out, x = x.out)
.. ..

Inputs
+++++

takes the following arguments for mixed:

-  formula: a two-sided linear formula object describing the
   systematic component of the model, with the response on the left of
   a :math:`\tilde{}` operator and the fixed effects terms, separated by +
   operators, on the right. Any random effects terms are included with
   the notation (z1 + ... + zn \| g) with z1 + ... + zn specifying
   the model for the random effects and g the grouping structure. Random
   intercept terms are included with the notation (1 \| g).
   | Alternatively, formula may be a list where the first entry, mu, is
   a two-sided linear formula object describing the systematic component
   of the model, with the repsonse on the left of a :math:`\tilde{}`
   operator and the fixed effects terms, separated by + operators, on
   the right. Any random effects terms are included with the notation
   (z1, delta \| g) with z1 specifying the individual level model for
   the random effects, g the grouping structure and delta references the
   second equation in the list. The delta equation is one-sided linear
   formula object with the group level model for the random effects on
   the right side of a :math:`\tilde{}` operator. The model is specified
   with the notation (w1 + ... + wn \| g) with w1 + ... + wn
   specifying the group level model and g the grouping structure.

Additional Inputs
+++++

In addition, `zelig()` accepts the following additional arguments for
model specification:

-  data: An optional data frame containing the variables named in
   formula. By default, the variables are taken from the environment
   from which `zelig()` is called.

-  method: a character string. The criterion is always the
   log-likelihood but this criterion does not have a closed form
   expression and must be approximated. The default approximation is
   “PQL” or penalized quasi-likelihood. Alternatives are “Laplace” or
   “AGQ” indicating the Laplacian and adaptive Gaussian quadrature
   approximations respectively.

-  na.action: A function that indicates what should happen when the data
   contain NAs. The default action (na.fail) causes zelig() to print an
   error message and terminate if there are any incomplete observations.

Additionally, users may with to refer to lmer in the package lme4 for
more information, including control parameters for the estimation
algorithm and their defaults.

Examples
+++++

.. {r, eval = TRUE, echo = FALSE}
rm(list=ls(pattern="\\.out"))	
suppressWarnings(suppressMessages(library(Zelig)))
suppressWarnings(suppressMessages(library(ZeligMultilevel)))
set.seed(1234)
.. ..


Basic Example with First Differences
!!!!!

Attach sample data:

.. {r, eval = TRUE}
data(coalition2)
.. ..

Estimate model using optional arguments to specify approximation
method for the log-likelihood, and the log link function for the Gamma family:

.. {r, eval = TRUE}
z.out1 <- zelig(duration ~ invest + fract + polar + numst2 + crisis + (1 | country),
                data=coalition2, model = "gamma.mixed")
.. ..

Summarize regression coefficients and estimated variance of random effects:

.. {r, eval = TRUE}
summary(z.out1)
.. ..

Set the baseline values (with the ruling coalition in the minority)
and the alternative values (with the ruling coalition in the majority) for X:

.. {r, eval = TRUE}
x.high <- setx(z.out1, numst2 = 1)
x.low <- setx(z.out1, numst2 = 0)
.. ..

Simulate expected values and first differences:

.. {r, eval = TRUE, echo = FALSE}
s.out1 <- Zelig::sim(z.out1, x = x.high, x1 = x.low) # to avoid potential issues with arm::sim
summary(s.out1)
.. ..

.. {r, eval = FALSE}
s.out1 <- sim(z.out1, x = x.high, x1 = x.low)
summary(s.out1)
.. ..

.. {r ZeligMultilevel-gammamixed, dev=c("png", "pdf"), eval = TRUE, fig.cap = "Graphs of Quantities of Interest for Gamma Mixed Model"}
plot(s.out1)
.. ..

Mixed effects gamma regression Model
+++++

Let :math:`Y_{ij}` be the continuous, positive dependent variable,
realized for observation :math:`j` in group :math:`i` as :math:`y_{ij}`,
for :math:`i = 1, \ldots, M`, :math:`j = 1, \ldots, n_i`.

-  The *stochastic component* is described by a Gamma model with scale
   parameter :math:`\alpha`.

   .. math:: Y_{ij} \sim \mathrm{Gamma}(y_{ij} | \lambda_{ij}, \alpha)

   where

   .. math:: Gamma(y_{ij} | \lambda_{ij}, \alpha) = \frac{1}{\alpha^{\lambda_{ij}} \Gamma \lambda_{ij}} y_{ij}^{\lambda_{ij} - 1} \exp (- \{ \frac{y_{ij}}{\alpha} \})

   for :math:`\alpha, \; \lambda_{ij}, \; y_{ij} \; > 0`.

-  The :math:`q`-dimensional vector of *random effects*, :math:`b_i`, is
   restricted to be mean zero, and therefore is completely characterized
   by the variance covarance matrix :math:`\Psi`, a :math:`(q \times q)`
   symmetric positive semi-definite matrix.

   .. math:: b_i \sim Normal(0, \Psi)

-  The *systematic component* is

   .. math:: \lambda_{ij} \equiv \frac{1}{X_{ij} \beta + Z_{ij} b_i}

   where :math:`X_{ij}` is the :math:`(n_i \times p \times M)` array of
   known fixed effects explanatory variables, :math:`\beta` is the
   :math:`p`-dimensional vector of fixed effects coefficients,
   :math:`Z_{ij}` is the :math:`(n_i \times q \times M)` array of known
   random effects explanatory variables and :math:`b_i` is the
   :math:`q`-dimensional vector of random effects.

Quantities of Interest
+++++

-  The predicted values are draws from the gamma distribution
   for each given set of parameters :math:`(\alpha, \lambda_{ij})`, for

   .. math:: \lambda_{ij} = \frac{1}{X_{ij} \beta + Z_{ij} b_i}

   given :math:`X_{ij}` and :math:`Z_{ij}` and simulations of of
   :math:`\beta` and :math:`b_i` from their posterior distributions. The
   estimated variance covariance matrices are taken as correct and are
   themselves not simulated.

-  The expected values (qi$ev) are simulations of the mean of the
   stochastic component given draws of :math:`\alpha`, :math:`\beta`
   from their posteriors:

   .. math:: E(Y_{ij} | X_{ij}) = \alpha \lambda_{ij} = \frac{\alpha}{X_{ij} \beta}.

-  The first difference (qi$fd) is given by the difference in expected
   values, conditional on :math:`X_{ij}` and :math:`X_{ij}^\prime`,
   representing different values of the explanatory variables.

   .. math:: FD(Y_{ij} | X_{ij}, X_{ij}^\prime) = E(Y_{ij} | X_{ij}) - E(Y_{ij} | X_{ij}^\prime)

-  In conditional prediction models, the average predicted treatment
   effect (qi$att.pr) for the treatment group is given by

   .. math:: \frac{1}{\sum_{i = 1}^M \sum_{j = 1}^{n_i} t_{ij}} \sum_{i = 1}^M \sum_{j:t_{ij} = 1}^{n_i} \{ Y_{ij} (t_{ij} = 1) - \widehat{Y_{ij}(t_{ij} = 0)} \},

   where :math:`t_{ij}` is a binary explanatory variable defining the
   treatment :math:`(t_{ij} = 1)` and control :math:`(t_{ij} = 0)`
   groups. Variation in the simulations is due to uncertainty in
   simulating :math:`Y_{ij}(t_{ij} = 0)`, the counterfactual predicted
   value of :math:`Y_{ij}` for observations in the treatment group,
   under the assumption that everything stays the same except that the
   treatment indicator is switched to :math:`t_{ij} = 0`.

-  In conditional prediction models, the average expected treatment
   effect (qi$att.ev) for the treatment group is given by

   .. math:: \frac{1}{\sum_{i = 1}^M \sum_{j = 1}^{n_i} t_{ij}} \sum_{i = 1}^M \sum_{j:t_{ij} = 1}^{n_i} \{ Y_{ij} (t_{ij} = 1) - E[Y_{ij}(t_{ij} = 0)] \},

   where :math:`t_{ij}` is a binary explanatory variable defining the
   treatment :math:`(t_{ij} = 1)` and control :math:`(t_{ij} = 0)`
   groups. Variation in the simulations is due to uncertainty in
   simulating :math:`E[Y_{ij}(t_{ij} = 0)]`, the counterfactual expected
   value of :math:`Y_{ij}` for observations in the treatment group,
   under the assumption that everything stays the same except that the
   treatment indicator is switched to :math:`t_{ij} = 0`.

Output Values
+++++

The output of each Zelig command contains useful information which you
may view. You may examine the available information in ``z.out`` by using
getters (http://docs.zeligproject.org/en/latest/getters.html), see the
fixed effect coefficients by using ``z.out$getcoef()``, and a default
summary of information through ``summary(z.out)``. Other elements available are listed below.

-  From the ``zelig()`` output stored in ``summary(z.out)``, you may extract:

   -  ``fixef``: numeric vector containing the conditional estimates of the
      fixed effects.

   -  ``ranef``: numeric vector containing the conditional modes of the
      random effects.

-  From the ``sim()`` output stored in ``s.out``, you may extract quantities of
   interest via getters:

   -  ``s.out$getqi(qi = "pv")``: the simulated predicted values drawn
      from the distributions defined by the expected values.

   -  ``s.out$getqi(qi = "ev")``: the simulated expected values for the
      specified values of x.

   -  ``s.out$getqi(qi = "fd")``: the simulated first differences in
      the expected values for the values specified in x and x1.

   -  ``s.out$getqi(treatment)``: the simulated average predicted
      treatment effect for the treated from conditional prediction models.

See also
+++++

Mixed effects gamma regression is part of lme4 package.

.. {r, eval = TRUE, echo=FALSE, results = "asis"} 
z5 <- zgammamixed$new()
z5$references()
.. ..

